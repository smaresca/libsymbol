/*
Copyright (c) 2010 Ryan Salsamendi

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

*/
#ifndef __TPI_H__
#define __TPI_H__

#define PDB_TYPES_HEADER_SIZE           0x38

#define PDB_VERSION_VC2                 19941610
#define PDB_VERSION_VC4                 19950623
#define PDB_VERSION_VC41                19950814
#define PDB_VERSION_VC50                19960307
#define PDB_VERSION_VC60                19970604
#define PDB_VERSION_VC70                19990604
#define PDB_VERSION_VC71                20000404
#define PDB_VERSION_VC8                 20040203

typedef enum  {
    LEAF_TYPE_FAKE = 0xFFFFFFFF,
    LEAF_TYPE_MODIFIER16 = 0x00000001,
    LEAF_TYPE_POINTER16 = 0x00000002,
    LEAF_TYPE_ARRAY16 = 0x00000003,
    LEAF_TYPE_CLASS16 = 0x00000004,
    LEAF_TYPE_STRUCTURE16 = 0x00000005,
    LEAF_TYPE_UNION16 = 0x00000006,
    LEAF_TYPE_ENUM16 = 0x00000007,
    LEAF_TYPE_PROCEDURE16 = 0x00000008,
    LEAF_TYPE_MFUNCTION16 = 0x00000009,
    LEAF_TYPE_VTSHAPE = 0x0000000A,
    LEAF_TYPE_COBOL0_16 = 0x0000000B,
    LEAF_TYPE_COBOL1 = 0x0000000C,
    LEAF_TYPE_BARRAY16 = 0x0000000D,
    LEAF_TYPE_LABEL = 0x0000000E,
    LEAF_TYPE_NULL = 0x0000000F,
    LEAF_TYPE_NOTTRAN = 0x00000010,
    LEAF_TYPE_DIMARRAY16 = 0x00000011,
    LEAF_TYPE_VFTPATH16 = 0x00000012,
    LEAF_TYPE_PRECOMP16 = 0x00000013,
    LEAF_TYPE_ENDPRECOMP = 0x00000014,
    LEAF_TYPE_OEM16 = 0x00000015,
    LEAF_TYPE_TYPESERVER_ST = 0x00000016,

    LEAF_TYPE_SKIP16 = 0x00000200,
    LEAF_TYPE_ARGLIST16 = 0x00000201,
    LEAF_TYPE_DEFARG16 = 0x00000202,
    LEAF_TYPE_LIST = 0x00000203,
    LEAF_TYPE_FIELDLIST16 = 0x00000204,
    LEAF_TYPE_DERIVED16 = 0x00000205,
    LEAF_TYPE_BITFIELD16 = 0x00000206,
    LEAF_TYPE_METHODLIST16 = 0x00000207,
    LEAF_TYPE_DIMCONU16 = 0x00000208,
    LEAF_TYPE_DIMCONLU16 = 0x00000209,
    LEAF_TYPE_DIMVARU16 = 0x0000020A,
    LEAF_TYPE_DIMVARLU16 = 0x0000020B,
    LEAF_TYPE_REFSYM = 0x0000020C,

    LEAF_TYPE_BCLASS16 = 0x00000400,
    LEAF_TYPE_VBCLASS16 = 0x00000401,
    LEAF_TYPE_IVBCLASS16 = 0x00000402,
    LEAF_TYPE_ENUMERATE_ST = 0x00000403,
    LEAF_TYPE_FRIENDFCN16 = 0x00000404,
    LEAF_TYPE_INDEX16 = 0x00000405,
    LEAF_TYPE_MEMBER16 = 0x00000406,
    LEAF_TYPE_STMEMBER16 = 0x00000407,
    LEAF_TYPE_METHOD16 = 0x00000408,
    LEAF_TYPE_NESTTYPE_16t = 0x00000409,
    LEAF_TYPE_VFUNCTAB_16t = 0x0000040A,
    LEAF_TYPE_FRIENDCLS_16t = 0x0000040B,
    LEAF_TYPE_ONEMETHOD_16t = 0x0000040C,
    LEAF_TYPE_VFUNCOFF_16t = 0x0000040D,

    LEAF_TYPE_TI16_MAX = 0x00001000,
    LEAF_TYPE_MODIFIER = 0x00001001,
    LEAF_TYPE_POINTER  = 0x00001002,
    LEAF_TYPE_ARRAY_ST = 0x00001003,
    LEAF_TYPE_CLASS_ST = 0x00001004,
    LEAF_TYPE_STRUCTURE_ST = 0x00001005,
    LEAF_TYPE_UNION_ST = 0x00001006,
    LEAF_TYPE_ENUM_ST = 0x00001007,
    LEAF_TYPE_PROCEDURE = 0x00001008,
    LEAF_TYPE_MFUNCTION = 0x00001009,
    LEAF_TYPE_COBOL0 = 0x0000100A,
    LEAF_TYPE_BARRAY = 0x0000100B,
    LEAF_TYPE_DIMARRAY_ST = 0x0000100C,
    LEAF_TYPE_VFTPATH = 0x0000100D,
    LEAF_TYPE_PRECOMP_ST = 0x0000100E,
    LEAF_TYPE_OEM = 0x0000100F,
    LEAF_TYPE_ALIAS_ST = 0x00001010,
    LEAF_TYPE_OEM2 = 0x00001011,

    LEAF_TYPE_SKIP = 0x00001200,
    LEAF_TYPE_ARGLIST = 0x00001201,
    LEAF_TYPE_DEFARG_ST = 0x00001202,
    LEAF_TYPE_FIELDLIST = 0x00001203,
    LEAF_TYPE_DERIVED = 0x00001204,
    LEAF_TYPE_BITFIELD = 0x00001205,
    LEAF_TYPE_METHODLIST = 0x00001206,
    LEAF_TYPE_DIMCONU = 0x00001207,
    LEAF_TYPE_DIMCONLU = 0x00001208,
    LEAF_TYPE_DIMVARU = 0x00001209,
    LEAF_TYPE_DIMVARLU = 0x0000120A,

    LEAF_TYPE_BCLASS = 0x00001400,
    LEAF_TYPE_VBCLASS = 0x00001401,
    LEAF_TYPE_IVBCLASS = 0x00001402,
    LEAF_TYPE_FRIENDFCN_ST = 0x00001403,
    LEAF_TYPE_INDEX = 0x00001404,
    LEAF_TYPE_MEMBER_ST = 0x00001405,
    LEAF_TYPE_STMEMBER_ST = 0x00001406,
    LEAF_TYPE_METHOD_ST = 0x00001407,
    LEAF_TYPE_NESTTYPE_ST = 0x00001408,
    LEAF_TYPE_VFUNCTAB = 0x00001409,
    LEAF_TYPE_FRIENDCLS = 0x0000140A,
    LEAF_TYPE_ONEMETHOD_ST = 0x0000140B,
    LEAF_TYPE_VFUNCOFF = 0x0000140C,
    LEAF_TYPE_NESTTYPEEX_ST = 0x0000140D,
    LEAF_TYPE_MEMBERMODIFY_ST = 0x0000140E,
    LEAF_TYPE_MANAGED_ST = 0x0000140F,

    LEAF_TYPE_ST_MAX = 0x00001500,
    LEAF_TYPE_TYPESERVER = 0x00001501,
    LEAF_TYPE_ENUMERATE = 0x00001502,
    LEAF_TYPE_ARRAY = 0x00001503,
    LEAF_TYPE_CLASS = 0x00001504,
    LEAF_TYPE_STRUCTURE = 0x00001505,
    LEAF_TYPE_UNION = 0x00001506,
    LEAF_TYPE_ENUM = 0x00001507,
    LEAF_TYPE_DIMARRAY = 0x00001508,
    LEAF_TYPE_PRECOMP = 0x00001509,
    LEAF_TYPE_ALIAS = 0x0000150A,
    LEAF_TYPE_DEFARG = 0x0000150B,
    LEAF_TYPE_FRIENDFCN = 0x0000150C,
    LEAF_TYPE_MEMBER = 0x0000150D,
    LEAF_TYPE_STMEMBER = 0x0000150E,
    LEAF_TYPE_METHOD = 0x0000150F,
    LEAF_TYPE_NESTTYPE = 0x00001510,
    LEAF_TYPE_ONEMETHOD = 0x00001511,
    LEAF_TYPE_NESTTYPEEX = 0x00001512,
    LEAF_TYPE_MEMBERMODIFY = 0x00001513,
    LEAF_TYPE_MANAGED = 0x00001514,
    LEAF_TYPE_TYPESERVER2 = 0x00001515,

    LEAF_TYPE_NUMERIC = 0x00008000,
    LEAF_TYPE_CHAR = 0x00008000,
    LEAF_TYPE_SHORT = 0x00008001,
    LEAF_TYPE_USHORT = 0x00008002,
    LEAF_TYPE_LONG = 0x00008003,
    LEAF_TYPE_ULONG = 0x00008004,
    LEAF_TYPE_REAL32 = 0x00008005,
    LEAF_TYPE_REAL64 = 0x00008006,
    LEAF_TYPE_REAL80 = 0x00008007,
    LEAF_TYPE_REAL128 = 0x00008008,
    LEAF_TYPE_QUADWORD = 0x00008009,
    LEAF_TYPE_UQUADWORD = 0x0000800A,
    LEAF_TYPE_REAL48 = 0x0000800B,
    LEAF_TYPE_COMPLEX32 = 0x0000800C,
    LEAF_TYPE_COMPLEX64 = 0x0000800D,
    LEAF_TYPE_COMPLEX80 = 0x0000800E,
    LEAF_TYPE_COMPLEX128 = 0x0000800F,
    LEAF_TYPE_VARSTRING = 0x00008010,
    LEAF_TYPE_OCTWORD = 0x00008017,
    LEAF_TYPE_UOCTWORD = 0x00008018,
    LEAF_TYPE_DECIMAL = 0x00008019,
    LEAF_TYPE_DATE = 0x0000801A,
    LEAF_TYPE_UTF8STRING = 0x0000801B,

    // Fake types for debugging (since I'm using the PDBs from this project for testing)
    // TODO:  Remove these when done
    LEAF_TYPE_FAKE_WTF = 0x0000FFFE,
    LEAF_TYPE_FAKE_WTF2 = 0x80000000,
    LEAF_TYPE_FAKE_WTF3 = 0xFFFFFFFF,
    LEAF_TYPE_FAKE_WTF4 = 0x0001FFFF,
    LEAF_TYPE_FAKE_WTF5 = 0xFFFFFFFF,
    LEAF_TYPE_FAKE_WTF6 = 0xFEFEFEFE,
    LEAF_TYPE_FAKE_WTF7 = 0x7FFFFFFF,
    LEAF_TYPE_FAKE_WTF8 = 0x10000
}PDB_LEAF_TYPES;



typedef struct PDB_TYPES_STREAM_HASH_ENTRY
{
	uint32_t offset;
	uint32_t size;
} PDB_TYPES_HASH_ENTRY;

typedef struct PDB_TYPES_HASH
{
	PDB_STREAM* stream;
	uint32_t keySize;
	uint32_t buckets;
	PDB_TYPES_HASH_ENTRY values;
	PDB_TYPES_HASH_ENTRY types;
	PDB_TYPES_HASH_ENTRY adjustments;
} PDB_TYPES_HASH;


#if 0 
typedef struct PDB_TYPES
{
	PDB_STREAM* stream;
	uint32_t version;
	uint32_t headerSize;
	uint32_t minId;
	uint32_t maxId;
	uint32_t len; // The amount of data after the header
	PDB_TYPES_HASH* hash;
} PDB_TYPES;
#endif

typedef struct PDB_TYPE_PROPERTIES
{
	uint16_t packed : 1;
	uint16_t ctor : 1;
	uint16_t ovlops : 1; // ?
	uint16_t isnested : 1; // ?
	uint16_t cnested : 1; // ?
	uint16_t opassign : 1; // ?
	uint16_t opcast : 1; // ?
	uint16_t fwdref : 1;
	uint16_t scoped : 1;
	uint16_t reserved : 1;
} PDB_TYPE_PROPERTIES;

typedef struct PDB_TYPE_FIELD_ATTRIBUTES
{
	uint16_t access : 2;
	uint16_t mprop : 3;
	uint16_t psuedo : 1;
	uint16_t noinherit : 1;
	uint16_t noconstruct : 1;
	uint16_t compgenx : 1;
	uint16_t reserved : 7;
} PDB_TYPE_FIELD_ATTRIBUTES;

typedef struct PDB_TYPE
{
	PDB_LEAF_TYPES type;
} PDB_TYPE;

typedef struct PDB_LEAF_TYPE_STRUCTURE
{
	uint16_t lf;
	uint16_t count;
	uint16_t prop;
	uint32_t field;
	uint32_t derived;
	uint32_t vshape;
	char* name;
} PDB_LEAF_TYPE_STRUCTURE;


typedef struct PDB_TYPES
{
    PDB_STREAM* stream;
    uint32_t version;
    uint32_t headerSize;
    uint32_t minId;
    uint32_t maxId;
    uint32_t len; // The amount of data after the header
    PDB_TYPES_HASH* hash;
} PDB_TYPES;

typedef bool (*PdbTypeEnumFunction)(void* ctxt);

#ifdef __cplusplus
extern "C"
{
#endif /* __cplusplus */

	PDBAPI PDB_TYPES* PdbTypesOpen(PDB_FILE* pdb);
	PDBAPI void PdbTypesClose(PDB_TYPES* types);

	PDBAPI uint32_t PdbTypesGetCount(PDB_TYPES* types);
	PDBAPI bool PdbTypesPrint(PDB_TYPES* types, const char* name, PdbTypeEnumFunction typeFn);
	PDBAPI bool PdbTypesEnumerate(PDB_TYPES* types, PdbTypeEnumFunction typeFn);


#ifdef __cplusplus
}
#endif /* __cplusplus */


#endif /* __TYPE_STREAM_H__ */

